models:
  # KPConv: Flexible and Deformable Convolution for Point Clouds (https://arxiv.org/abs/1904.08889)
  # KPConv support format_type="[PARTIAL_DENSE | MESSAGE_PASSING]"
  SiameseKPConv_DC_dualT:
    path_pretrained: "/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-11-22/DeepCluster-Train-2022-11-22-SiameseKPConv_DC_dualT-20221122_205915/SiameseKPConv_DC_dualT.pt" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-11-14/DeepCluster-Train-2022-11-14-SiameseKPConv_DC_dualT-20221114_161224/SiameseKPConv_DC_dualT.pt" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-11-02/DeepCluster-Train-2022-11-02-SiameseKPConv_DC_dualT-20221102_161856/SiameseKPConv_DC_dualT.pt" #"/gpfsdswork/projects/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-10-28/DeepCluster-Train-2022-10-28-SiameseKPConv_DC_dualT-20221028_003541/SiameseKPConv_DC_dualT.pt" #"/share/projects/deep3dt/models_pretrained/sem_seg_tp3d/KPFCNN/17-40-10/KPConvPaper.pt" #
    path_pretrained_encoders: "" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d-svg290822/outputs/2021-07-30-V2-Lid05/11-10-03/SiameseKPConv.pt" #"/share/projects/deep3dt/res/AHN/Transfer/SiameseKPConv.pt" #
    weight_name: "latest"
    class: siamesekpconv_dc_dualT.SiameseKPConv_DC_dual
    conv_type: "PARTIAL_DENSE"
    deepCluster:
      n1_epoch: 0 # nb epoch train only seg
      n2_epoch: 0 # nb epoch train only cd (decoders CD only)
      lossContTotal: False
      alpha: 5 # margin for max margin contrastive loss- Let us say if two points are dissimilar, their distance should be greater than the margin.
      contrastive_on_label: False # If True take the pseudo label ground truth to orientate the contrastive loss; else take the prediction results
      y_from_threshold: True # True : it prevails over contrastive_on_label option
    define_constants:
      in_grid_size: ${data.first_subsampling}
      FEAT: 0
      in_feat: 64
      bn_momentum: 0.02
    down_conv:
      n_kernel_points: 25
      down_conv_nn:
        [
          [[FEAT + 1, in_feat], [in_feat, 2*in_feat]],
          [[2*in_feat, 2*in_feat], [2*in_feat, 4*in_feat]],
          [[4*in_feat, 4*in_feat], [4*in_feat, 8*in_feat]],
          [[8*in_feat, 8*in_feat], [8*in_feat, 16*in_feat]],
          [[16*in_feat, 16*in_feat], [16*in_feat, 32*in_feat]],
        ]
      grid_size:
        [
          [in_grid_size, in_grid_size],
          [2*in_grid_size, 2*in_grid_size],
          [4*in_grid_size, 4*in_grid_size],
          [8*in_grid_size, 8*in_grid_size],
          [16*in_grid_size, 16*in_grid_size],
        ]
      prev_grid_size:
        [
          [in_grid_size, in_grid_size],
          [in_grid_size, 2*in_grid_size],
          [2*in_grid_size, 4*in_grid_size],
          [4*in_grid_size, 8*in_grid_size],
          [8*in_grid_size, 16*in_grid_size],
        ]
      block_names:
        [
          ["SimpleBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
        ]
      has_bottleneck:
        [[False, True], [True, True], [True, True], [True, True], [True, True]]
      deformable:
        [
          [False, False],
          [False, False],
          [False, False],
          [False, False],
          [False, False],
        ]
      max_num_neighbors: [[25, 25], [25, 30], [30, 38], [38, 38], [38, 38]]
      module_name: KPDualBlock
    up_conv_cd:
      module_name: FPModule_PD
      up_conv_nn:
        [
          [32*in_feat + 16*in_feat, 8*in_feat],
          [8*in_feat + 8*in_feat, 4*in_feat],
          [4*in_feat + 4*in_feat, 2*in_feat],
          [2*in_feat + 2*in_feat, in_feat],
        ]
      skip: True
      up_k: [1, 1, 1, 1]
      bn_momentum:
        [bn_momentum, bn_momentum, bn_momentum, bn_momentum, bn_momentum]
    up_conv_seg:
      module_name: FPModule_PD
      up_conv_nn:
        [
          [ 32*in_feat + 16*in_feat, 8*in_feat ],
          [ 8*in_feat + 8*in_feat, 4*in_feat ],
          [ 4*in_feat + 4*in_feat, 2*in_feat ],
          [ 2*in_feat + 2*in_feat, in_feat ],
        ]
      skip: True
      up_k: [ 1, 1, 1, 1 ]
      bn_momentum:
        [ bn_momentum, bn_momentum, bn_momentum, bn_momentum, bn_momentum ]
    mlp_cls_cd:
      nn: [ in_feat ]
      dropout: 0.5
      bn_momentum: bn_momentum
    prototypes_cd:
      nn: [ in_feat ]
    mlp_cls_seg:
      nn: [ in_feat ]
      dropout: 0.5
      bn_momentum: bn_momentum
    prototypes_seg:
      nn: [ in_feat ]
    loss_weights:
      lambda_reg: 1e-6

