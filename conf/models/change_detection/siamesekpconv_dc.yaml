models:
  # KPConv: Flexible and Deformable Convolution for Point Clouds (https://arxiv.org/abs/1904.08889)
  # KPConv support format_type="[PARTIAL_DENSE | MESSAGE_PASSING]"
  SiameseKPConv_DC:
    path_pretrained: "" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-11-03/DeepCluster-Train-2022-11-03-SiameseKPConv_DC-20221103_150249/SiameseKPConv_DC.pt" #"/share/home/degelis/dev/torch-points3d/outputs/DeepCluster-Train-2022-10-19/DeepCluster-Train-2022-10-19-SiameseKPConv_DC-20221019_174634/SiameseKPConv_DC.pt" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-10-04/DeepCluster-Train-2022-10-04-SiameseKPConv_DC-20221004_153050/SiameseKPConv_DC.pt"  #/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/2021-07-30-V2-Lid05/11-10-03/SiameseKPConv.pt" #"/share/projects/deep3dt/res/AHN/Transfer/SiameseKPConv.pt" #
    path_pretrained_encoders: "" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d-svg290822/outputs/2021-07-30-V2-Lid05/11-10-03/SiameseKPConv.pt" #"/share/projects/deep3dt/res/AHN/Transfer/SiameseKPConv.pt" #
    weight_name: "latest"
    class: siamesekpconv_dc.SiameseKPConv_DC
    conv_type: "PARTIAL_DENSE"
    deepCluster_V2: True #if True last linear layer is a mapping to cluster centroids
    deepCluster:
      pre_train_kmean: 0
    downstreamTaskTraining: False # if True just train the prototype layer with supervised label, loading of pre-train weight from path_pretrained
    define_constants:
      in_grid_size: ${data.first_subsampling}
      FEAT: 10
      in_feat: 64
      bn_momentum: 0.02
    down_conv:
      n_kernel_points: 25
      down_conv_nn:
        [
          [[FEAT + 1, in_feat], [in_feat, 2*in_feat]],
          [[2*in_feat, 2*in_feat], [2*in_feat, 4*in_feat]],
          [[4*in_feat, 4*in_feat], [4*in_feat, 8*in_feat]],
          [[8*in_feat, 8*in_feat], [8*in_feat, 16*in_feat]],
          [[16*in_feat, 16*in_feat], [16*in_feat, 32*in_feat]],
        ]
      grid_size:
        [
          [in_grid_size, in_grid_size],
          [2*in_grid_size, 2*in_grid_size],
          [4*in_grid_size, 4*in_grid_size],
          [8*in_grid_size, 8*in_grid_size],
          [16*in_grid_size, 16*in_grid_size],
        ]
      prev_grid_size:
        [
          [in_grid_size, in_grid_size],
          [in_grid_size, 2*in_grid_size],
          [2*in_grid_size, 4*in_grid_size],
          [4*in_grid_size, 8*in_grid_size],
          [8*in_grid_size, 16*in_grid_size],
        ]
      block_names:
        [
          ["SimpleBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
          ["ResnetBBlock", "ResnetBBlock"],
        ]
      has_bottleneck:
        [[False, True], [True, True], [True, True], [True, True], [True, True]]
      deformable:
        [
          [False, False],
          [False, False],
          [False, False],
          [False, False],
          [False, False],
        ]
      max_num_neighbors: [[25, 25], [25, 30], [30, 38], [38, 38], [38, 38]]
      module_name: KPDualBlock
    up_conv:
      module_name: FPModule_PD
      up_conv_nn:
        [
          [32*in_feat + 16*in_feat, 8*in_feat],
          [8*in_feat + 8*in_feat, 4*in_feat],
          [4*in_feat + 4*in_feat, 2*in_feat],
          [2*in_feat + 2*in_feat, in_feat],
        ]
      skip: True
      up_k: [1, 1, 1, 1]
      bn_momentum:
        [bn_momentum, bn_momentum, bn_momentum, bn_momentum, bn_momentum]
    mlp_cls:
      nn: [in_feat]
      dropout: 0.5
      bn_momentum: bn_momentum
    prototypes:
      nn: [in_feat]
    loss_weights:
      lambda_reg: 1e-6
