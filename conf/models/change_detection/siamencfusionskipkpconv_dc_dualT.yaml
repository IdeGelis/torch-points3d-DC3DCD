models:
  # KPConv: Flexible and Deformable Convolution for Point Clouds (https://arxiv.org/abs/1904.08889)
  # KPConv support format_type="[PARTIAL_DENSE | MESSAGE_PASSING]"
  SiamEncFusionSkipKPConv_DC_dualT:
    path_pretrained: "" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/2021-07-30-V2-Lid05/11-10-03/SiameseKPConv.pt" #"/share/projects/deep3dt/res/AHN/Transfer/SiameseKPConv.pt" #
    path_pretrained_seg: "/share/home/degelis/dev/torch-points3d/outputs/DeepCluster-Train-2023-02-06/DeepCluster-Train-2023-02-06-SiamEncFusionSkipKPConv_DC_dualT-20230206_132914/segsem/SiamEncFusionSkipKPConv_DC_dualT.pt" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-11-24/DeepCluster-Train-2022-11-24-SiameseKPConv_DC_dualT-20221124_060539/SiameseKPConv_DC_dualT.pt" #"/gpfswork/rech/rin/utf14pr/dev/torch-points3d/outputs/DeepCluster-Train-2022-11-24/DeepCluster-Train-2022-11-24-SiameseKPConv_DC_dualT-20221124_060539/SiameseKPConv_DC_dualT.pt"
    weight_name: "latest"
    class: siamencfusionskipkpconv_dc_dualT.SiamEncFusionSkipKPConv_DC_dualT
    conv_type: "PARTIAL_DENSE"
    deepCluster:
      nSeg_epoch: 0 # nb epoch train only seg First train on Seg
      nCD_epoch: 150 # nb epoch train only cd
      y_from_threshold: True # True : it prevails over contrastive_on_label option
    downstreamTaskTraining: False # if True just train the prototype layer with supervised label, loading of pre-train weight from path_pretrained
    define_constants:
      in_grid_size: ${data.first_subsampling}
      FEAT: 0
      in_feat: 64
      bn_momentum: 0.02
    down_conv_seg:
      n_kernel_points: 25
      down_conv_nn:
        [
          [ [ FEAT + 1, in_feat ], [ in_feat, 2*in_feat ] ],
          [ [ 2*in_feat, 2*in_feat ], [ 2*in_feat, 4*in_feat ] ],
          [ [ 4*in_feat, 4*in_feat ], [ 4*in_feat, 8*in_feat ] ],
          [ [ 8*in_feat, 8*in_feat ], [ 8*in_feat, 16*in_feat ] ],
          [ [ 16*in_feat, 16*in_feat ], [ 16*in_feat, 32*in_feat ] ],
        ]
      grid_size:
        [
          [ in_grid_size, in_grid_size ],
          [ 2*in_grid_size, 2*in_grid_size ],
          [ 4*in_grid_size, 4*in_grid_size ],
          [ 8*in_grid_size, 8*in_grid_size ],
          [ 16*in_grid_size, 16*in_grid_size ],
        ]
      prev_grid_size:
        [
          [ in_grid_size, in_grid_size ],
          [ in_grid_size, 2*in_grid_size ],
          [ 2*in_grid_size, 4*in_grid_size ],
          [ 4*in_grid_size, 8*in_grid_size ],
          [ 8*in_grid_size, 16*in_grid_size ],
        ]
      block_names:
        [
          [ "SimpleBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
        ]
      has_bottleneck:
        [ [ False, True ], [ True, True ], [ True, True ], [ True, True ], [ True, True ] ]
      deformable:
        [
          [ False, False ],
          [ False, False ],
          [ False, False ],
          [ False, False ],
          [ False, False ],
        ]
      max_num_neighbors: [ [ 25, 25 ], [ 25, 30 ], [ 30, 38 ], [ 38, 38 ], [ 38, 38 ] ]
      module_name: KPDualBlock
    down_conv_cd:
      n_kernel_points: 25
      down_conv_nn:
        [
          [ [ FEAT + 1, in_feat ], [ in_feat, 2*in_feat ] ],
          [ [ 4*in_feat, 2*in_feat ], [ 2*in_feat, 4*in_feat ] ],
          [ [ 8*in_feat, 4*in_feat ], [ 4*in_feat, 8*in_feat ] ],
          [ [ 16*in_feat, 8*in_feat ], [ 8*in_feat, 16*in_feat ] ],
          [ [ 32*in_feat, 16*in_feat ], [ 16*in_feat, 32*in_feat ] ],
        ]
      grid_size:
        [
          [ in_grid_size, in_grid_size ],
          [ 2*in_grid_size, 2*in_grid_size ],
          [ 4*in_grid_size, 4*in_grid_size ],
          [ 8*in_grid_size, 8*in_grid_size ],
          [ 16*in_grid_size, 16*in_grid_size ],
        ]
      prev_grid_size:
        [
          [ in_grid_size, in_grid_size ],
          [ in_grid_size, 2*in_grid_size ],
          [ 2*in_grid_size, 4*in_grid_size ],
          [ 4*in_grid_size, 8*in_grid_size ],
          [ 8*in_grid_size, 16*in_grid_size ],
        ]
      block_names:
        [
          [ "SimpleBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
          [ "ResnetBBlock", "ResnetBBlock" ],
        ]
      has_bottleneck:
        [ [ False, True ], [ True, True ], [ True, True ], [ True, True ], [ True, True ] ]
      deformable:
        [
          [ False, False ],
          [ False, False ],
          [ False, False ],
          [ False, False ],
          [ False, False ],
        ]
      max_num_neighbors: [ [ 25, 25 ], [ 25, 30 ], [ 30, 38 ], [ 38, 38 ], [ 38, 38 ] ]
      module_name: KPDualBlock
    up_conv_cd:
      module_name: FPModule_PD
      up_conv_nn:
        [
          [ 64*in_feat + 32*in_feat, 8*in_feat ],
          [ 8*in_feat + 16*in_feat, 4*in_feat ],
          [ 4*in_feat + 8*in_feat, 2*in_feat ],
          [ 2*in_feat + 4*in_feat, in_feat ],
        ]
      skip: True
      up_k: [ 1, 1, 1, 1 ]
      bn_momentum:
        [ bn_momentum, bn_momentum, bn_momentum, bn_momentum, bn_momentum ]
    up_conv_seg:
      module_name: FPModule_PD
      up_conv_nn:
        [
          [ 32*in_feat + 16*in_feat, 8*in_feat ],
          [ 8*in_feat + 8*in_feat, 4*in_feat ],
          [ 4*in_feat + 4*in_feat, 2*in_feat ],
          [ 2*in_feat + 2*in_feat, in_feat ],
        ]
      skip: True
      up_k: [ 1, 1, 1, 1 ]
      bn_momentum:
        [ bn_momentum, bn_momentum, bn_momentum, bn_momentum, bn_momentum ]
    mlp_cls_cd:
      nn: [ in_feat ]
      dropout: 0.5
      bn_momentum: bn_momentum
    prototypes_cd:
      nn: [ in_feat ]
    mlp_cls_seg:
      nn: [ in_feat ]
      dropout: 0.5
      bn_momentum: bn_momentum
    prototypes_seg:
      nn: [ in_feat ]
    loss_weights:
      lambda_reg: 1e-6
